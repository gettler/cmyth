#!/usr/bin/python
#
# Copyright (C) 2013, Jon Gettler
# http://cmyth.github.com/
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#

#
# pylive - A live TV example application for libcmyth using Pyside.
#

import sys
import time
import SimpleHTTPServer
import threading
import random
import SocketServer
from PySide import QtCore, QtGui
from PySide.QtCore import QUrl
import cmyth

from pylive import *

port = 0
ltv = None
streaming = False
commands = []
control = None
backend = ''
channel = None
verbose = False

lock = threading.Lock()
cond = threading.Condition(lock)

def debug(msg):
    global verbose
    if verbose:
        print msg

def error(msg):
    print msg

class InvokeEvent(QtCore.QEvent):
    EVENT_TYPE = QtCore.QEvent.Type(QtCore.QEvent.registerEventType())

    def __init__(self, fn, *args, **kwargs):
        QtCore.QEvent.__init__(self, InvokeEvent.EVENT_TYPE)
        self.fn = fn
        self.args = args
        self.kwargs = kwargs

class Invoker(QtCore.QObject):
    def event(self, event):
        event.fn(*event.args, **event.kwargs)

        return True

_invoker = Invoker()

def gui(fn, *args, **kwargs):
    """Invoke a GUI function call in the main application thread."""

    QtCore.QCoreApplication.postEvent(_invoker,
        InvokeEvent(fn, *args, **kwargs))

class Server(threading.Thread):
    """
    A web server thread.  The server will be created on a random port,
    and the httpd class will be invoked for each connection.
    """

    def run(self):
        global port
        while True:
            port = random.randint(10000, 20000)
            self.s = SocketServer.ThreadingTCPServer(('localhost', port),
                                                     httpd)
            if self.s != None:
                debug('httpd server started on port %d' % port)
                break
        self.s.serve_forever()

class httpd(SimpleHTTPServer.SimpleHTTPRequestHandler):
    """
    A simple web server responder capable of providing the live TV video
    data to the requester.
    """

    def do_GET(self):
        debug('GET %s' % self.path)
        debug(self.headers)

        global ltv
        file = ltv

        self.send_response(200)
        self.send_header('Connection', 'close')
        self.send_header('Transfer-Encoding', 'chunked')
        self.end_headers()

        rbytes = 0
        wbytes = 0
        try:
            global streaming
            while streaming:
                rc,buf = file.read()
                if rc < 0:
                    error('Read error')
                    break
                self.wfile.write('%x\r\n' % len(buf))
                rbytes = rbytes + len(buf)
                self.wfile.write(buf)
                wbytes = wbytes + len(buf)
                self.wfile.write('\r\n')
            self.wfile.write('0\r\n')
            debug('Done: wrote %d bytes' % bytes)
        except:
            debug('connection closed after %d,%d bytes' % (rbytes,wbytes))

        debug('transfer complete')

class player(threading.Thread):
    """
    A thread that acts on the commands generated by the GUI.  Since some of
    the libcmyth accesses can be slow, putting this in a seperate thread
    allows the GUI to remain responsive.
    """

    def __init__(self, ui):
        threading.Thread.__init__(self)
        self.ui = ui
        self.paused = False
        self.conn = None

    def run(self):
        global commands
        while True:
            lock.acquire()
            cond.wait()
            cmd = commands[0]
            commands = commands[1:]
            lock.release()
            debug('player command: %s' % cmd)
            if cmd == 'backend':
                self.backend()
            elif cmd == 'disconnect':
                self.disconnect()
            elif cmd == 'connect':
                self.backend()
            elif cmd == 'play':
                self.play()
            elif cmd == 'pause':
                self.pause()
            elif cmd == 'stop':
                self.stop()
            elif cmd == 'change':
                self.change()
            elif cmd == 'exit':
                self.stop()
                break

    def backend(self):
        global backend
        global ltv
        debug("player.backend() conn: %s" % self.conn)
        if self.conn == None:
            try:
                self.conn = cmyth.connection(backend)
                debug('connected to %s' % backend)
            except:
                error('connection failed')
                self.ui.buttonConnect.setText('Connect')
        if self.conn != None:
            gui(self.ui.buttonConnect.setText, 'Disconnect')
            self.setup()

    def disconnect(self):
        global ltv
        global streaming
        debug("player.disconnect()")
        gui(self.ui.videoPlayer.stop)
        gui(self.ui.buttonConnect.setText, 'Connect')
        gui(self.ui.start_stop.setEnabled, False)
        gui(self.ui.pause.setEnabled, False)
        ltv.stop()
        ltv = None
        streaming = False

    def sortkey(self, channel):
        channel = channel.replace('-', ' ')
        channel = channel.replace('_', ' ')
        x = channel.split(' ')
        return int(x[0])

    def setup(self):
        global ltv
        debug("player.setup()")
        ltv = self.conn.start_livetv()
        if ltv:
            gui(self.ui.comboChannel.clear)
            gui(self.ui.recorder_box.clear)
            cl = ltv.get_chanlist()
            channels = []
            for i in range(cl.get_count()):
                chan = cl.get_channel(i)
                channels.append(chan.string())
            channels.sort(key=self.sortkey)
            for c in channels:
                gui(self.ui.comboChannel.addItem, c)
            gui(self.ui.comboChannel.setCurrentIndex, 0)
            gui(self.ui.recorder_box.addItem, 'any')
            gui(self.ui.start_stop.setText, 'Start')
            gui(self.ui.start_stop.setEnabled, True)

    def play(self):
        global streaming
        debug('player.play()')
        if not streaming:
            global channel
            global ltv
            streaming = True
            gui(self.ui.start_stop.setText, 'Stop')
            debug('start live TV')
            ltv.start()
            ltv.set_channel(channel)
            prog = ltv.get_prog()
            time.sleep(1)
            link = 'http://localhost:%d/' % port
            debug('URL: %s' % link)
            gui(self.ui.videoPlayer.play, QUrl(link))
            gui(self.ui.pause.setEnabled, True)
            gui(self.ui.set_name, prog.title())

    def stop(self):
        global streaming
        debug('player.stop()')
        if streaming:
            gui(self.ui.videoPlayer.stop)
            streaming = False
            gui(self.ui.start_stop.setText, 'Start')
            ltv.stop()
            gui(self.ui.pause.setEnabled, False)

    def pause(self):
        global streaming
        debug('player.pause()')
        if streaming:
            if self.paused:
                self.paused = False
                gui(self.ui.videoPlayer.play)
            else:
                self.paused = True
                gui(self.ui.videoPlayer.pause)

    def change(self):
        global streaming
        debug('player.change()')
        if streaming:
            self.stop()
            time.sleep(1)
            self.play()

class MyMainWindow(Ui_Pylive):
    """The main GUI window."""

    server = None

    def signal(self, cmd):
        global commands
        lock.acquire()
        commands.append(cmd)
        cond.notify()
        lock.release()

    def menuExit(self):
        self.signal('exit')
        self.MainWindow.close()

    def menuAbout(self):
        msgBox = QtGui.QMessageBox()
        msgBox.setText('pylive: A Python libcmyth sample application')
        msgBox.setInformativeText('http://cmyth.github.com/')
        msgBox.exec_()

    def setBackend(self):
        global backend
        backend = str(self.editBackend.text())
        self.signal('backend')

    def connect_toggle(self):
        global ltv
        if ltv:
            debug('ui.connect_toggle(disconnect)')
            self.signal('disconnect')
        else:
            debug('ui.connect_toggle(connect)')
            self.signal('connect')

    def start_toggle(self):
        global streaming
        if streaming:
            debug('ui.start_toggle(stop)')
            self.signal('stop')
        else:
            debug('ui.start_toggle(play)')
            self.signal('play')

    def pauseTV(self):
        debug('ui.pauseTV()')
        self.signal('pause')

    def change_channel(self, text):
        global channel
        debug('change channel to %s' % text)
        channel = str(text)
        self.signal('change')

    def set_name(self, text):
        if text:
            self.MainWindow.setWindowTitle('pylive: %s' % text)
        else:
            self.MainWindow.setWindowTitle('pylive')

    def setupUi(self, MainWindow):
        super(MyMainWindow, self).setupUi(MainWindow)
        self.MainWindow = MainWindow
        self.set_name(None)
        self.setupCallbacks()
        self.start_stop.setEnabled(False)
        self.pause.setEnabled(False)
        self.videoPlayer.finished.connect(self.videoPlayer.deleteLater)
        self.volumeSlider.setAudioOutput(self.videoPlayer.audioOutput())
        video = player(self)
        video.daemon = True
        video.start()

    def setupCallbacks(self):
        QtCore.QObject.connect(self.actionExit, QtCore.SIGNAL("triggered()"),
                               self.menuExit)
        QtCore.QObject.connect(self.actionAbout, QtCore.SIGNAL("triggered()"),
                               self.menuAbout)
        QtCore.QObject.connect(self.editBackend,
                               QtCore.SIGNAL("returnPressed()"),
                               self.setBackend)
        QtCore.QObject.connect(self.start_stop, QtCore.SIGNAL("clicked()"),
                               self.start_toggle)
        QtCore.QObject.connect(self.pause, QtCore.SIGNAL("clicked()"),
                               self.pauseTV)
        QtCore.QObject.connect(self.buttonConnect, QtCore.SIGNAL("clicked()"),
                               self.connect_toggle)
        QtCore.QObject.connect(self.comboChannel,
                               QtCore.SIGNAL("currentIndexChanged(QString)"),
                               self.change_channel)

class MainWindow(QtGui.QMainWindow):
    def __init__(self, parent=None):
        super(MainWindow, self).__init__(parent)
        self.ui = MyMainWindow()
        self.ui.setupUi(self)

def get_data():
    time.sleep(1)

def main():
    app = QtGui.QApplication(sys.argv)
    app.setApplicationName('pylive')

    mySW = MainWindow()
    mySW.show()

    server = Server()
    server.daemon = True
    server.start()

    sys.exit(app.exec_())

if __name__ == "__main__":
    verbose = True
    main()
