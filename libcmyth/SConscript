#!/usr/bin/python
#
# libcmyth
#

import sys

Import('env')

src = [ 'bookmark.c', 'connection.c', 'debug.c', 'event.c',
        'file.c', 'freespace.c', 'keyframe.c',
        'posmap.c', 'proginfo.c', 'proglist.c', 'rec_num.c', 
        'recorder.c', 'ringbuf.c', 'socket.c', 'timestamp.c',
        'livetv.c', 'commbreak.c' ]

if not env.GetOption('clean'):
    conf = Configure(env)
    if conf.CheckCHeader('mysql/mysql.h'):
        conf.env.Append(CPPFLAGS = '-DHAS_MYSQL')
        src += [ 'mythtv_mysql.c', 'mysql_query.c' ]
    env = conf.Finish()
else:
    src += [ 'mythtv_mysql.c', 'mysql_query.c' ]

major = '0'
minor = '1'
version = major + '.' + minor
soname = 'libcmyth.so.' + version
soname2 = 'libcmyth.so.' + major
soname3 = 'libcmyth.so'

if sys.platform == 'darwin':
    linkflags = [ ]
else:
    linkflags = [ '-Wl,-soname,' + soname ]

static = env.StaticLibrary('cmyth', src,
                           LINKFLAGS = linkflags,
                           LIBS = [ 'refmem' ],
                           CPPPATH = [ '../include', '.' ],
                           LIBPATH = [ '../librefmem' ])
shared = env.SharedLibrary('cmyth', src,
                           SHLIBSUFFIX = '.so.' + version,
                           LINKFLAGS = linkflags,
                           LIBS = [ 'refmem' ],
                           CPPPATH = [ '../include', '.' ],
                           LIBPATH = [ '../librefmem' ])

link2 = env.Command(soname2, shared,
                   'ln -sf %s %s' % (soname, soname2), chdir=1)
link3 = env.Command(soname3, soname2,
                   'ln -sf %s %s' % (soname2, soname3), chdir=1)

if sys.platform == 'darwin':
    targets = [ static ]
else:
    targets = [ static, shared, link2, link3 ]

prefix = env['PREFIX']
install = env.Install(prefix + '/lib', targets)
symlink2 = env.Command(prefix + '/lib/' + soname2, link2,
                       'ln -sf %s %s' % (soname, prefix + '/lib/' + soname2))
symlink3 = env.Command(prefix + '/lib/' + soname3, link3,
                       'ln -sf %s %s' % (soname2, prefix + '/lib/' + soname3))

Return('targets')
