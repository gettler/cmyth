#
# libcmyth
#

import sys
import shutil

Import('env')

prefix = env['PREFIX']
platform = env['PLATFORM']

name = 'cmyth'
major = 0
minor = 1
branch = 3

src = [ 'bookmark.c', 'connection.c', 'debug.c', 'event.c',
        'file.c', 'freespace.c', 'keyframe.c',
        'posmap.c', 'proginfo.c', 'proglist.c', 'rec_num.c', 
        'recorder.c', 'ringbuf.c', 'socket.c', 'timestamp.c',
        'livetv.c', 'commbreak.c' ]

if platform == 'android':
    makefile = env.NDK(name, src,
                       LIBS = [ 'refmem' ],
                       LIBDIRS = [ '../librefmem' ],
                       INCLUDES = [ '../include', '.' ])
    env.Install(prefix + '/lib', makefile)
    targets = [ makefile ]
else:
    libs = []
    conf = Configure(env)
    if conf.CheckCHeader('mysql/mysql.h') and conf.CheckLib('mysqlclient'):
        conf.env.Append(CPPFLAGS = '-DHAS_MYSQL')
        libs += [ 'mysqlclient' ]
        src += [ 'mythtv_mysql.c', 'mysql_query.c' ]
    env = conf.Finish()

    linkflags = env.soname(name, major, minor, branch)

    static = env.StaticLibrary(name, src,
                               LIBS = libs,
                               LINKFLAGS = env['LDFLAGS'],
                               CPPPATH = [ '../include', '.' ])

    shared = env.SharedLibrary(name, src,
                               SHLIBSUFFIX = env.shlibsuffix(major, minor, branch),
                               LINKFLAGS = linkflags + ' ' + env['LDFLAGS'],
                               LIBS = libs,
                               CPPPATH = [ '../include', '.' ])

    link0 = env.Symlink('lib%s%s' % (name, env.shlibsuffix(major, minor)), shared)
    link1 = env.Symlink('lib%s%s' % (name, env.shlibsuffix(major)), link0)
    link2 = env.Symlink('lib%s%s' % (name, env.shlibsuffix()), link1)

    targets = [ static ]

    if env.build_shared():
        targets += [ shared, link0, link1, link2 ]

    env.Install(prefix + '/lib', static)

    lib0 = env.Install(prefix + '/lib', shared)
    lib1 = env.Symlink('%s/lib/lib%s%s' % (prefix, name,
                                           env.shlibsuffix(major, minor)), lib0)
    lib2 = env.Symlink('%s/lib/lib%s%s' % (prefix, name,
                                           env.shlibsuffix(major)), lib1)
    lib3 = env.Symlink('%s/lib/lib%s%s' % (prefix, name,
                                           env.shlibsuffix()), lib2)

if env.GetOption('clean'):
    for i in [ 'libs', 'jni', 'obj' ]:
        try:
            shutil.rmtree(i)
        except:
            pass

Return('targets')
