#
# libcmyth
#

import sys
import shutil

Import('env')

prefix = env['PREFIX']
platform = env['PLATFORM']

name = 'cmyth'
major = 0
minor = 2
branch = 5
fork = 1

version = [ major, minor, branch, fork ]

libver = env.GenVersion('version.h',
                        VERSION = version)

libs = [ 'refmem' ]

src = [ 'bookmark.c', 'connection.c', 'debug.c', 'event.c',
        'file.c', 'freespace.c', 'keyframe.c',
        'posmap.c', 'proginfo.c', 'proglist.c', 'rec_num.c', 
        'recorder.c', 'ringbuf.c', 'socket.c', 'timestamp.c',
        'livetv.c', 'commbreak.c', 'version.c', 'chanlist.c', 'channel.c',
        'chain.c' ]

if platform == 'android':
    makefile = env.NDK(name, src,
                       LIBS = [ 'refmem' ],
                       LIBDIRS = [ '../librefmem' ],
                       INCLUDES = [ '../include', '.' ])
    env.Install(prefix + '/lib', makefile)
    targets = [ makefile ]
else:
    if env['HAS_MYSQL'] == 'yes':
        libs += [ 'mysqlclient' ]
        src += [ 'mythtv_mysql.c', 'mysql_query.c' ]

    linkflags = env.soname(name, major, minor, branch, fork)

    static = env.StaticLibrary(name, src,
                               LIBS = libs,
                               LINKFLAGS = env['LDFLAGS'],
                               LIBPATH = '../librefmem',
                               CPPPATH = [ '../include', '.' ])

    shared = env.CMSharedLibrary(name, src,
                                 VERSION = version,
                                 LINKFLAGS = linkflags + ' ' + env['LDFLAGS'],
                                 LIBS = libs,
                                 LIBPATH = '../librefmem',
                                 CPPPATH = [ '../include', '.' ])

    targets = [ static ]

    if env.build_shared():
        targets += [ shared ]

        env.InstallShared(prefix + '/lib', shared,
                          VERSION = version,
                          NAME = name)

    env.Install(prefix + '/lib', static)

env.Depends(src, libver)

if env.GetOption('clean'):
    env.Clean(targets, [ 'version.h' ])
    for i in [ 'libs', 'jni', 'obj' ]:
        try:
            shutil.rmtree(i)
        except:
            pass

Return('targets')
