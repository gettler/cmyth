#
# SWIG - Simplified Wrapper and Interface Generator
#
# Generate interfaces to libcmyth for other languages.
#

import os
import sys
import shutil
from distutils import sysconfig

import SCons.Util

Import('env')

prefix = env['PREFIX']
platform = env['PLATFORM']

targets = []

interface = [ 'cmyth.i', Glob('../include/*.h'), Glob('../include/*/*.h') ]
cmd = '%s -c++ -%s -Iinclude -o swig/%s swig/cmyth.i'
cmd_python = '%s -c++ -threads -%s -Iinclude -o swig/%s swig/cmyth.i'
cmd_c = '%s -%s -Iinclude -o swig/%s swig/cmyth.i'
cmd_java = '%s -c++ -%s -package %s -outdir %s -o swig/%s -Iinclude swig/cmyth.i'
cmd_js = '%s -c++ -javascript -node -o swig/%s -Iinclude swig/cmyth.i'

def CheckBinary(context, name):
    context.Message('Checking for %s ...' % name)
    ret = SCons.Util.WhereIs(name)
    if ret == None:
        context.Result('no')
    else:
        context.Result(ret)
    return ret

def CheckJava(context):
    context.Message('Checking for Java headers ...')
    dirs = [ '/usr/lib/jvm/default-java',
             '/System/Library/Frameworks/JavaVM.framework' ]
    ret = None
    for dir in dirs:
        if os.path.isdir(dir):
            ret = dir
    if ret == None:
        context.Result('no')
    else:
        context.Result(ret)
    return ret

def CheckPHP(context):
    context.Message('Checking for PHP headers ...')
    cmd = context.env['CMD_PHPCONFIG']
    ret = None
    if cmd:
        rc,phpinc,err = context.env.run_command('%s --include-dir' % cmd)
        dir = phpinc[:-1]
        if os.path.isdir(dir):
            ret = dir
    if ret == None:
        context.Result('no')
    else:
        context.Result(ret)
    return ret

def CheckRubyHdr(context):
    context.Message('Checking for Ruby headers ...')
    cmd = context.env['CMD_RUBY']
    ret = []
    if cmd:
        def conf_lookup(name, variable):
            conf = '%s -rrbconfig -e \'puts %s::CONFIG["%s"]\''
            cmd = conf % (context.env['CMD_RUBY'], name, var)
            rc,result,err = context.env.run_command(cmd)
            line = result.split('\n')[0]
            if rc == 0 and len(line) > 0 and line != 'nil':
                return line
            else:
                return None

        for var in [ 'rubyhdrdir', 'rubyarchhdrdir', 'archdir' ]:
            for name in [ 'RbConfig', 'Config' ]:
                try:
                    result = conf_lookup(name, var)
                    if result:
                        ret += [ result ]
                        break
                except:
                    pass

    if len(ret) == 0:
        context.Result('no')
        return None
    else:
        # SCons 2.3.1 can return a list, but 2.1.0 cannot...
        context.Result(str(ret))
    return ret

def CheckLisp(context):
    context.Message('Checking for Common Lisp ...')
    ret = None
    for l in [ 'sbcl', 'ccl', 'ecl' ]:
        cmd = SCons.Util.WhereIs(l)
        if cmd:
            ret = cmd
            break
    if ret == None:
        context.Result('no')
    else:
        context.Result(ret)
    return ret

def CheckLua(context):
    context.Message('Checking for Lua ...')
    ret = None
    for l in [ 'lua', 'lua5.1', 'lua5.2', 'lua-5.2' ]:
        cmd = SCons.Util.WhereIs(l)
        if cmd:
            ret = cmd
            break
    if ret == None:
        context.Result('no')
    else:
        context.Result(ret)
    return ret

def CheckLuaCflags(context):
    context.Message('Checking for Lua CFLAGS ...')
    ret = None
    for l in [ 'lua', 'lua5.1', 'lua5.2', 'lua-5.2' ]:
        rc,cflags,err = env.run_command('pkg-config --cflags %s' % l)
        if rc == 0:
            ret = cflags.split('\n')[0]
    if ret == None:
        context.Result('no')
    else:
        context.Result(ret)
    return ret

def CheckLuaLDflags(context):
    context.Message('Checking for Lua LDFLAGS ...')
    ret = None
    for l in [ 'lua', 'lua5.1', 'lua5.2', 'lua-5.2' ]:
        rc,libs,err = env.run_command('pkg-config --libs %s' % l)
        if rc == 0:
            ret = libs.split('\n')[0]
            break
    if ret == None:
        context.Result('no')
    else:
        context.Result(ret)
    return ret

def CheckPerl(context):
    context.Message('Checking for Perl headers ...')
    perl = context.env['CMD_PERL']
    ret = None
    if perl:
        cmd = '%s -e \'use Config; print "$Config{archlib}\n";\'' % perl
        rc,perlarch,err = env.run_command(cmd)
        ret = perlarch[:-1]
    if ret == None:
        context.Result('no')
    else:
        context.Result(ret)
    return ret

def CheckPython(context):
    context.Message('Checking for Python headers ...')
    cmd = context.env['CMD_PYTHON']
    ret = None
    if cmd:
        incdir = sysconfig.get_python_inc()
        if os.path.isfile('%s/Python.h' % incdir):
            ret = incdir
    if ret == None:
        context.Result('no')
    else:
        context.Result(ret)
    return ret

def CheckSwigJS(context):
    context.Message('Checking for SWIG Javascript support ...')
    cmd = context.env['CMD_SWIG']
    ret = None
    if cmd:
        rc,result,err = env.run_command('%s -help' % cmd)
        if rc == 0 and 'javascript' in result:
            ret = True
    if ret == None:
        context.Result('no')
    else:
        context.Result(ret)
    return ret

def CheckJShdr(context):
    context.Message('Checking for Javascript headers ...')
    cmd = context.env['CMD_SWIG']
    ret = None
    for path in [ '/usr/include', '/usr/local/include' ]:
        if os.path.exists('%s/nodejs/src' % path) and \
                os.path.exists('%s/nodejs/deps/uv/include' % path):
            ret = path
            break
    if ret == None:
        context.Result('no')
    else:
        context.Result(ret)
    return ret

conf = Configure(env, custom_tests = { 'CheckBinary' : CheckBinary,
                                       'CheckJava' : CheckJava,
                                       'CheckRubyHdr' : CheckRubyHdr,
                                       'CheckLisp' : CheckLisp,
                                       'CheckLua' : CheckLua,
                                       'CheckLuaCflags' : CheckLuaCflags,
                                       'CheckLuaLDflags' : CheckLuaLDflags,
                                       'CheckPerl' : CheckPerl,
                                       'CheckPython' : CheckPython,
                                       'CheckPHP': CheckPHP,
                                       'CheckSwigJavascript': CheckSwigJS,
                                       'CheckJavascriptHdr': CheckJShdr })
env['CMD_SWIG'] = conf.CheckBinary('swig') or conf.CheckBinary('swig3.0') or conf.CheckBinary('swig2.0')
if env['CMD_SWIG']:
    if env['PLATFORM'] != 'ios':
        env['CMD_JAVAC'] = conf.CheckBinary('javac')
        if env['CMD_JAVAC']:
            env['JAVA_HOME'] = conf.CheckJava()
    if not env['PLATFORM'] in [ 'android', 'ios' ]:
        env['CMD_CLOJURE'] = conf.CheckBinary('clojure')
        env['CMD_PHP'] = conf.CheckBinary('php')
        if env['CMD_PHP']:
            env['CMD_PHPCONFIG'] = conf.CheckBinary('php-config')
            env['PHP_INCLUDE'] = conf.CheckPHP()
        env['CMD_PYTHON'] = conf.CheckBinary('python')
        if env['CMD_PYTHON']:
            env['PYTHON_INC'] = conf.CheckPython()
        env['CMD_RUBY'] = conf.CheckBinary('ruby')
        if env['CMD_RUBY']:
            env['CMD_GEM'] = conf.CheckBinary('gem')
            env['RUBY_HDRDIRS'] = conf.CheckRubyHdr()
        env['CMD_LISP'] = conf.CheckLisp()
        env['CMD_LUA'] = conf.CheckLua()
        if env['CMD_LUA']:
            env['LUA_CFLAGS'] = conf.CheckLuaCflags()
            env['LUA_LDFLAGS'] = conf.CheckLuaLDflags()
        env['CMD_PERL'] = conf.CheckBinary('perl')
        if env['CMD_PERL']:
            env['PERL_ARCH'] = conf.CheckPerl()
        env['CMD_SCALA'] = conf.CheckBinary('scalac')
        env['CMD_NODEJS'] = conf.CheckBinary('nodejs')
        env['SWIG_JAVASCRIPT'] = conf.CheckSwigJavascript()
        env['JAVASCRIPT_HEADERS'] = conf.CheckJavascriptHdr()
env = conf.Finish()

#
# Python
#
if env.CreateBinding('python'):
    libs = [ 'cppmyth', 'cmyth', 'refmem' ]
    if sys.platform == 'darwin':
        libs += [ 'python' ]
    python = env.Command([ 'cmyth_python.cpp', 'cmyth.py' ],
                         interface,
                         [ cmd_python % (env['CMD_SWIG'], 'python', 'cmyth_python.cpp') ])
    targets += python
    shared = env.SharedLibrary('cmyth_python',
                               [ 'cmyth_python.cpp' ],
                               SHLIBSUFFIX = '.so',
                               LIBS = libs,
                               CCFLAGS = '',
                               CXXFLAGS = env['DEBUGFLAGS'],
                               CPPPATH = [ '../include', '.',
                                           env['PYTHON_INC'] ],
                               LIBPATH = [ '../libcppmyth',
                                           '../libcmyth',
                                           '../librefmem' ])
    targets += shared
    link_so = env.Symlink('python/_cmyth.so', 'libcmyth_python.so')
    targets += link_so
    link_py = env.Symlink('python/cmyth.py', 'cmyth.py')
    targets += link_py
    version = '0.0.1'
    setup = env.GenSetup('python/setup.py',
                         [ link_so, link_py, 'python/__init__.py' ],
                         SETUP_NAME = 'cmyth',
                         SETUP_VERSION = version,
                         SETUP_DESCRIPTION =
                         'An API for communicating with a MythTV backend.',
                         SETUP_AUTHOR = 'Jon Gettler',
                         SETUP_AUTHOR_EMAIL = 'gettler@mvpmc.org',
                         SETUP_URL = 'http://cmyth.github.com/',
                         SETUP_LICENSE = 'LGPL',
                         SETUP_DIR = 'swig/python')
    targets += setup

    if env.GetOption('clean'):
        try:
            os.unlink('cmyth.pyc')
        except:
            pass

#
# PHP
#
if env.CreateBinding('php'):
    php = env.Command([ 'cmyth_php.cpp', 'php_cmyth.h', 'cmyth.php' ],
                      interface,
                      [ cmd % (env['CMD_SWIG'], 'php', 'cmyth_php.cpp') ])
    targets += php
    phpinc = env['PHP_INCLUDE']
    if sys.platform == 'darwin':
        linkflags = '-Wl,-flat_namespace,-undefined,warning'
    else:
        linkflags = ''
    shared = env.SharedLibrary('cmyth_php',
                               [ 'cmyth_php.cpp' ],
                               SHLIBSUFFIX = '.so',
                               LIBS = [ 'cppmyth', 'cmyth', 'refmem' ],
                               CCFLAGS = '',
                               CXXFLAGS = env['DEBUGFLAGS'],
                               LINKFLAGS = linkflags,
                               CPPPATH = [ '../include', '.',
                                           phpinc,
                                           phpinc + '/main',
                                           phpinc + '/TSRM',
                                           phpinc + '/Zend' ],
                               LIBPATH = [ '../libcppmyth',
                                           '../libcmyth',
                                           '../librefmem' ])
    targets += shared
    link = env.Symlink('php/cmyth.so', 'libcmyth_php.so')
    targets += link

    if env.GetOption('clean'):
        try:
            shutil.rmtree('php')
        except:
            pass

#
# Ruby
#
if env.CreateBinding('ruby'):
    libs = [ 'cppmyth', 'cmyth', 'refmem' ]
    suffix = '.so'
    if sys.platform == 'darwin':
        libs += [ 'ruby' ]
        suffix = '.bundle'
    ruby = env.Command([ 'cmyth_ruby.cpp' ],
                       interface,
                       [ cmd % (env['CMD_SWIG'], 'ruby', 'cmyth_ruby.cpp') ])
    targets += ruby
    hdrdirs = env['RUBY_HDRDIRS']
    shared = env.SharedLibrary('cmyth_ruby',
                               [ 'cmyth_ruby.cpp' ],
                               SHLIBSUFFIX = '.so',
                               CCFLAGS = '',
                               CXXFLAGS = env['DEBUGFLAGS'],
                               LIBS = libs,
                               CPPPATH = [ '../include', '.' ] + hdrdirs,
                               LIBPATH = [ '../libcppmyth',
                                           '../libcmyth',
                                           '../librefmem' ])
    targets += shared
    link = env.Symlink('ruby/lib/cmyth.so', 'libcmyth_ruby.so')
    targets += link
    version = '0.0.1'
    gem = env.GenGemspec('ruby/cmyth.gemspec', link,
                         GEM_NAME = 'cmyth',
                         GEM_VERSION = version,
                         GEM_SUMMARY = 'cmyth MythTV API',
                         GEM_DESCRIPTION = 'API for communicating with a MythTV backend.',
                         GEM_AUTHORS = 'Jon Gettler',
                         GEM_EMAIL = 'gettler@mvpmc.org',
                         GEM_HOMEPAGE = 'http://cmyth.github.com/',
                         GEM_DIR = 'swig/ruby')
    targets += gem

    if env['CMD_GEM'] != None:
        gem = env.Command([ 'ruby/cmyth-%s.gem' % version ],
                          [ gem, link ],
                          'cd swig/ruby && gem build cmyth.gemspec')
        targets += gem


    if env.GetOption('clean'):
        try:
            shutil.rmtree('ruby')
        except:
            pass

#
# Java
#
if env.CreateBinding('java'):
    javapath = env['JAVA_HOME']
    if os.path.isfile(javapath + '/include/jni.h') or \
            os.path.isfile(javapath + '/Headers/jni.h'):
        path = 'org/mvpmc/cmyth/java'
        try:
            os.makedirs(path)
        except:
            pass
        bases = [ 'cmyth', 'cmythJNI', 'cmythConstants',
                  'SWIGTYPE_p_cmyth_conn_t',
                  'SWIGTYPE_p_cmyth_proglist_t',
                  'SWIGTYPE_p_cmyth_proginfo_t',
                  'SWIGTYPE_p_cmyth_event_t',
                  'SWIGTYPE_p_cmyth_channeldir_t',
                  'SWIGTYPE_p_cmyth_browsedir_t',
                  'SWIGTYPE_p_cmyth_recorder_t',
                  'SWIGTYPE_p_cmyth_chanlist_t',
                  'filetype_t', 'progtype_t',
                  'connection', 'exception', 'proginfo', 'proglist',
                  'refmem', 'file', 'event', 'livetv', 'recorder',
                  'chanlist', 'channel' ]
        src_list = []
        for i in bases:
            src_list.append(path + '/' + i + '.java')
        src = ''
        for i in src_list:
            src = src + ' ' + i
        classes = ''
        for i in bases:
            classes = classes + path + '/' + i + '.class '
        src_list.append('cmyth_java.cpp')
        java = env.Command(src_list,
                           interface,
                           [ cmd_java % (env['CMD_SWIG'], 'java', 'org.mvpmc.cmyth.java',
                                         'swig/' + path, 'cmyth_java.cpp') ])
        targets += java
        if sys.platform == 'darwin':
            suffix = '.jnilib'
            linkflags = [ 'librefmem/librefmem.a',
                          'libcmyth/libcmyth.a',
                          'libcppmyth/libcppmyth.a' ]
            libs = [ ]
            libpath = [ ]
        else:
            suffix = '.so'
            linkflags = [ ]
            libs = [ 'cppmyth', 'cmyth', 'refmem' ]
            libpath = [ '../libcppmyth', '../libcmyth', '../librefmem' ]
        if platform == 'android':
            makefile = env.NDK('cmyth_java', 'cmyth_java.cpp',
                               LIBS = [ 'cppmyth', 'refmem' ],
                               LIBDIRS = [ '../libcppmyth', '../librefmem' ],
                               INCLUDES = [ '../include', '.' ])
            targets += makefile
            env.Install(prefix + '/lib', makefile)
        else:
            shared = env.SharedLibrary('cmyth_java',
                                       [ 'cmyth_java.cpp' ],
                                       SHLIBSUFFIX = suffix,
                                       CCFLAGS = '',
                                       CXXFLAGS = env['DEBUGFLAGS'],
                                       LINKFLAGS = linkflags,
                                       LIBS = libs,
                                       LIBPATH = libpath,
                                       CPPPATH = [ '../include', '.',
                                                   javapath + '/include',
                                                   javapath + '/Headers', ])
            targets += shared
        output = env.Command(path + '/cmyth.class',
                             [ java, interface],
                             [ 'cd swig && %s -d %s -sourcepath %s %s' %
                               (env['CMD_JAVAC'], '.', path, src) ])
                                  
        jar = env.Command('cmyth.jar', [ output, interface ],
                          [ 'cd swig && jar cf cmyth.jar %s' % classes ])
        targets += jar

        if not platform == 'android':
            env.Install(prefix + '/lib', shared)
        env.Install(prefix + '/lib', jar)

        if env.GetOption('clean'):
            for i in [ 'org', 'libs', 'jni', 'obj' ]:
                try:
                    shutil.rmtree(i)
                except:
                    pass

#
# Common Lisp
#
if env.CreateBinding('lisp'):
    lisp = env.Command([ 'cmyth.lisp' ],
                       interface,
                       [ cmd_c % (env['CMD_SWIG'], 'cffi', 'cmyth.lisp') ])
    targets += lisp
    package = env.CatFiles([ 'lisp/cmyth.lisp' ],
                           [ lisp],
                           HEADER = '(in-package #:cmyth)')
    targets += package
    setup = env.GenASDF('lisp/cmyth.asd',
                        [ 'lisp/package.lisp',
                          lisp,
                          'lisp/cffi.lisp',
                          'lisp/refmem.lisp', 'lisp/exception.lisp',
                          'lisp/connection.lisp', 'lisp/file.lisp',
                          'lisp/proginfo.lisp', 'lisp/debug.lisp' ],
                        ASDF_NAME = 'cmyth',
                        ASDF_DESCRIPTION =
                        'An API for communicating with a MythTV backend.',
                        ASDF_AUTHOR = 'Jon Gettler <gettler@mvpmc.org>',
                        ASDF_LICENSE = 'LLGPL',
                        ASDF_DEPENDS = [ 'cffi', 'trivial-garbage' ],
                        ASDF_DIR = 'swig/lisp')
    targets += setup

#
# Perl
#
if env.CreateBinding('perl'):
    perlarch = env['PERL_ARCH']
    perl = env.Command([ 'cmyth_perl.cpp', 'cmyth.pm' ],
                       interface,
                       [ cmd % (env['CMD_SWIG'], 'perl', 'cmyth_perl.cpp') ])
    targets += perl
    if sys.platform == 'darwin':
        linkflags = '-Wl,-flat_namespace,-undefined,warning'
    else:
        linkflags = ''
    libs = [ 'cppmyth', 'cmyth', 'refmem' ]
    shared = env.SharedLibrary('cmyth_perl',
                               [ 'cmyth_perl.cpp' ],
                               SHLIBSUFFIX = '.so',
                               LIBS = libs,
                               CCFLAGS = '',
                               CXXFLAGS = env['DEBUGFLAGS'],
                               LINKFLAGS = linkflags,
                               CPPPATH = [ '../include', '.',
                                           '%s/CORE' % perlarch ],
                               LIBPATH = [ '../libcppmyth',
                                           '../libcmyth',
                                           '../librefmem' ])
    targets += shared
    link = env.Symlink('perl/cmyth.so', 'libcmyth_perl.so')
    targets += link
    link = env.Symlink('perl/cmyth.pm', 'cmyth.pm')
    targets += link

#
# Lua
#
if env.CreateBinding('lua'):
    lua = env.Command([ 'cmyth_lua.cpp' ],
                      interface,
                      [ cmd % (env['CMD_SWIG'], 'lua', 'cmyth_lua.cpp') ])
    targets += lua
    libs = [ 'cppmyth', 'cmyth', 'refmem' ]
    cflags = env['LUA_CFLAGS'] + ' ' + env['DEBUGFLAGS']
    linkflags = env['LUA_LDFLAGS']
    shared = env.SharedLibrary('cmyth_lua',
                               [ 'cmyth_lua.cpp' ],
                               SHLIBSUFFIX = '.so',
                               LIBS = libs,
                               CCFLAGS = '',
                               CXXFLAGS = cflags,
                               LINKFLAGS = linkflags,
                               CPPPATH = [ '../include', '.' ],
                               LIBPATH = [ '../libcppmyth',
                                           '../libcmyth',
                                           '../librefmem' ])
    targets += shared

#
# Javascript
#
if env.CreateBinding('javascript'):
    hdr = env['JAVASCRIPT_HEADERS']
    js = env.Command([ 'cmyth_js.cpp' ],
                     interface,
                     [ cmd_js % (env['CMD_SWIG'], 'cmyth_js.cpp') ])
    cflags = '-DBUILDING_NODE_EXTENSION'
    linkflags = '-Wl,-soname=cmyth.node'
    shared = env.SharedLibrary('cmyth-node',
                               js,
                               SHLIBSUFFIX = '.so',
                               LIBS = libs,
                               CXXFLAGS = cflags,
                               LINKFLAGS = linkflags,
                               CPPPATH = [ '../include',
                                           '%s/nodejs/src' % hdr,
                                           '%s/nodejs/deps/uv/include' % hdr ],
                               LIBPATH = [ '../libcppmyth',
                                           '../libcmyth',
                                           '../librefmem' ])
    link = env.Command('cmyth.node',
                       shared,
                       'cp swig/libcmyth-node.so swig/cmyth.node')
    targets += link

Return('targets')
