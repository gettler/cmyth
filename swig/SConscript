#
# SWIG - Simplified Wrapper and Interface Generator
#
# Generate interfaces to libcmyth for other languages.
#

import os
import sys
import shutil
from distutils import sysconfig

Import('env')

prefix = env['PREFIX']

targets = []

interface = [ 'cmyth.i', Glob('../include/*.h'), Glob('../include/*/*.h') ]
cmd = 'swig -c++ -%s -Iinclude -o swig/%s swig/cmyth.i'
cmd_java = 'swig -c++ -%s -package %s -outdir %s -o swig/%s -Iinclude swig/cmyth.i'

conf = Configure(env)

#
# Python
#
if env.swig_use_python():
    python = env.Command([ 'cmyth_python.cpp', 'cmyth.py' ],
                         interface,
                         [ cmd % ('python', 'cmyth_python.cpp') ])
    targets += python
    shared = env.SharedLibrary('cmyth_python',
                               [ 'cmyth_python.cpp' ],
                               SHLIBSUFFIX = '.so',
                               LIBS = [ 'cppmyth' ],
                               CPPPATH = [ '../include', '.',
                                           sysconfig.get_python_inc() ],
                               LIBPATH = [ '../libcppmyth' ])
    targets += shared
    env.Install(prefix + '/lib/python', [ 'cmyth.py' ])
    env.Install(prefix + '/lib', shared)
    if 'install' in COMMAND_LINE_TARGETS:
        env.Command(prefix + '/lib/python/_cmyth.so', shared,
                    'ln -sf ../libcmyth_python.so %s/%s' % (prefix,
                                                            'lib/python/_cmyth.so'))

#
# PHP
#
if env.swig_use_php():
    php = env.Command([ 'cmyth_php.cpp', 'php_cmyth.h', 'cmyth.php' ],
                      interface,
                      [ cmd % ('php', 'cmyth_php.cpp') ])
    targets += php
    shared = env.SharedLibrary('cmyth_php',
                               [ 'cmyth_php.cpp' ],
                               SHLIBSUFFIX = '.so',
                               LIBS = [ 'cppmyth' ],
                               CPPPATH = [ '../include', '.',
                                           '/usr/include/php5',
                                           '/usr/include/php5/main',
                                           '/usr/include/php5/TSRM',
                                           '/usr/include/php5/Zend' ],
                               LIBPATH = [ '../libcppmyth' ])
    targets += shared
    env.Install(prefix + '/lib', shared)
    env.Install(prefix + '/lib/php', 'cmyth.php')
    if 'install' in COMMAND_LINE_TARGETS:
        env.Command(prefix + '/lib/php/_cmyth.so', shared,
                    'ln -sf ../libcmyth_php.so %s/%s' % (prefix,
                                                            'lib/php/cmyth.so'))

#
# Ruby
#
if env.swig_use_ruby():
    rc,rubyarch,err = env.run_command('ruby -rrbconfig -e '
                                      '\'puts Config::CONFIG["archdir"]\'')
    ruby = env.Command([ 'cmyth_ruby.cpp' ],
                       interface,
                       [ cmd % ('ruby', 'cmyth_ruby.cpp') ])
    targets += ruby
    shared = env.SharedLibrary('cmyth_ruby',
                               [ 'cmyth_ruby.cpp' ],
                               SHLIBSUFFIX = '.so',
                               LIBS = [ 'cppmyth' ],
                               CPPPATH = [ '../include', '.',
                                           rubyarch[:-1] ],
                               LIBPATH = [ '../libcppmyth' ])
    targets += shared
    env.Install(prefix + '/lib', shared)
    if 'install' in COMMAND_LINE_TARGETS:
        env.Command(prefix + '/lib/ruby/cmyth.so', shared,
                    'ln -sf ../libcmyth_ruby.so %s/%s' % (prefix,
                                                       'lib/ruby/cmyth.so'))

#
# Java
#
if env.swig_use_java():
    javapath = env['JAVA_HOME']
    if os.path.isfile(javapath + '/include/jni.h'):
        path = 'org/mvpmc/cmyth/java'
        try:
            os.makedirs(path)
        except:
            pass
        bases = [ 'cmyth', 'cmythJNI', 'cmythConstants',
                  'SWIGTYPE_p_cmyth_conn_t',
                  'SWIGTYPE_p_cmyth_proglist_t',
                  'SWIGTYPE_p_cmyth_proginfo_t',
                  'SWIGTYPE_p_int',
                  'SWIGTYPE_p_p_char',
                  'connection', 'exception', 'proginfo', 'proglist',
                  'refmem', 'file' ]
        src_list = []
        for i in bases:
            src_list.append(i + '.java')
        src = ''
        for i in src_list:
            src = src + ' ' + path + '/' + i
        classes = ''
        for i in bases:
            classes = classes + path + '/' + i + '.class '
        src_list.append('cmyth_java.cpp')
        java = env.Command(src_list,
                           interface,
                           [ cmd_java % ('java', 'org.mvpmc.cmyth.java',
                                         'swig/' + path, 'cmyth_java.cpp') ])
        targets += java
        shared = env.SharedLibrary('cmyth_java',
                                   [ 'cmyth_java.cpp' ],
                                   SHLIBSUFFIX = '.so',
                                   LIBS = [ 'cppmyth' ],
                                   CPPPATH = [ '../include', '.',
                                               javapath + '/include' ],
                                   LIBPATH = [ '../libcppmyth' ])
        targets += shared
        output = env.Command(path + '/cmyth.class',
                             java,
                             [ 'javac -d %s -sourcepath %s %s' % ('.',
                                                                  path,
                                                                  src) ],
                             chdir='swig')
                                  
        jar = env.Command('cmyth.jar', output,
                          [ 'jar cf cmyth.jar %s' % classes ],
                          chdir='swig')
        targets += jar

        env.Install(prefix + '/lib', shared)
        env.Install(prefix + '/lib', jar)

        if env.GetOption('clean'):
            try:
                shutil.rmtree('org')
            except:
                pass

env = conf.Finish()

Return('targets')
