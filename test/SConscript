#
# SWIG language binding test cases.
#

import os
import shutil

Import('env')

targets = []

cpplibs = [ 'cppmyth', 'cmyth', 'pthread', 'refmem' ]
libpath = [ '../libcmyth', '../libcppmyth', '../librefmem', '../swig' ]
ccflags = env['CFLAGS']

if not env.GetOption('clean'):
    conf = Configure(env)
    if conf.CheckLib('crypto', 'MD5_Init'):
        cpplibs += [ 'crypto' ]
        ccflags = ccflags + ' -DWITH_SSL'
    env = conf.Finish()

if env.CreateBinding('java'):
    java_test = env.Java('test_java.class', 'test_java.java',
                         JAVACLASSPATH='swig')
    targets += java_test
    if env.GetOption('clean'):
        try:
            shutil.rmtree('test_java.class')
        except:
            pass

if env.CreateBinding('lua'):
    lua_cflags = ccflags + ' ' + env['LUA_CFLAGS']
    lua_ldflags = env['LUA_LDFLAGS'].strip().split()
    lua_libs = []
    lua_libdirs = []
    for l in lua_ldflags:
        if l.startswith('-l'):
            lua_libs += [ l[2:] ]
        if l.startswith('-L'):
            lua_libdirs += [ l[2:] ]
    lua_test = env.Program('test_lua', 'test_lua.cpp',
                           CPPPATH = [ '../include' ],
                           CCFLAGS = lua_cflags + ' ' + ccflags,
                           LIBS = cpplibs + [ 'cmyth_lua' ] + lua_libs,
                           LIBPATH = libpath + lua_libdirs)
    targets += lua_test

if env.CreateBinding('scala'):
    scala_test = env.Command([ 'TestScala.class', 'TestScala$.class',
                               File('TestScala$$anonfun$test_file$1.class'),
                               File('TestScala$$anonfun$test_file$2.class'),
                               File('TestScala$$anonfun$test_host$1.class'),
                               File('TestScala$$anonfun$test_host$2.class'),
                               File('TestScala$$anonfun$test_host$3.class'),
                               File('TestScala$$anonfun$test_thumbnail$1.class'),
                               File('TestScala$$anonfun$test_thumbnail$2.class')],
                             'test_scala.scala',
                             'scalac -d test -classpath swig test/test_scala.scala')
    targets += scala_test

cpp_test = env.Program('test_cpp', 'test_cpp.cpp',
                       CPPPATH = [ '../include' ],
                       CCFLAGS = ccflags,
                       LIBS = cpplibs,
                       LIBPATH = libpath)

targets += cpp_test

def create_test_all():
    languages = [ 'cpp' ]
    for l in [ 'clojure', 'java', 'lisp', 'lua', 'perl', 'php', 'python',
               'ruby', 'scala' ]:
        if env.CreateBinding(l):
            languages += [ l ]
    f = open('test_all.sh', 'w')
    head = [
        '#!/bin/sh',
        '',
        'TOP=`git rev-parse --show-toplevel`',
        '',
        'if [ "${TOP}" = "--show-toplevel" ] ; then',
        '    TOP=`pwd`',
        'fi',
        '',
        'TESTDIR=${TOP}/test',
        '',
        ]
    f.write('\n'.join(head))
    for l in languages:
        f.write('${TESTDIR}/test_%s.sh $@\n' % l)
        f.write('result_%s=$?\n' % l)
    for l in languages:
        f.write('echo "Result for %s: " ${result_%s}\n' % (l,l))
    f.close()
    os.chmod('test_all.sh', 0755)

if env.GetOption('clean'):
    env.Clean(targets, [ 'test_all.sh' ])
else:
    create_test_all()

Return('targets')
