#
# SWIG language binding test cases.
#

import shutil

Import('env')

targets = []

cpplibs = [ 'cppmyth', 'cmyth', 'pthread', 'refmem' ]
libpath = [ '../libcmyth', '../libcppmyth', '../librefmem', '../swig' ]
ccflags = env['CFLAGS']

if not env.GetOption('clean'):
    conf = Configure(env)
    if conf.CheckLib('crypto', 'MD5_Init'):
        cpplibs += [ 'crypto' ]
        ccflags = ccflags + ' -DWITH_SSL'
    env = conf.Finish()

if env['CMD_JAVAC'] != None and env['JAVA_HOME'] != None:
    java_test = env.Java('test_java.class', 'test_java.java',
                         JAVACLASSPATH='swig')
    targets += java_test
    if env.GetOption('clean'):
        try:
            shutil.rmtree('test_java.class')
        except:
            pass

if env['CMD_LUA'] and env['CMD_LUA_CFLAGS'] and env['CMD_LUA_LDFLAGS']:
    lua_cflags = ccflags + ' ' + env['CMD_LUA_CFLAGS']
    lua_lib = '-l%s' % env['CMD_LUA']
    lua_test = env.Program('test_lua', 'test_lua.cpp',
                           CPPPATH = [ '../include' ],
                           CCFLAGS = lua_cflags + ' ' + ccflags,
                           LIBS = cpplibs + [ 'cmyth_lua', lua_lib ],
                           LIBPATH = libpath,
                           LINKFLAGS = env['CMD_LUA_LDFLAGS'])
    targets += lua_test

if env['CMD_SCALA']:
    scala_test = env.Command([ 'TestScala.class', 'TestScala$.class',
                               File('TestScala$$anonfun$test_file$1.class'),
                               File('TestScala$$anonfun$test_file$2.class'),
                               File('TestScala$$anonfun$test_host$1.class'),
                               File('TestScala$$anonfun$test_host$2.class'),
                               File('TestScala$$anonfun$test_host$3.class'),
                               File('TestScala$$anonfun$test_thumbnail$1.class'),
                               File('TestScala$$anonfun$test_thumbnail$2.class')],
                             'test_scala.scala',
                             'scalac -d test -classpath swig test/test_scala.scala')
    targets += scala_test

cpp_test = env.Program('test_cpp', 'test_cpp.cpp',
                       CPPPATH = [ '../include' ],
                       CCFLAGS = ccflags,
                       LIBS = cpplibs,
                       LIBPATH = libpath)

targets += cpp_test

Return('targets')
