#
# librefmem
#

import sys
import shutil

Import('env')

prefix = env['PREFIX']
platform = env['PLATFORM']

name = 'refmem'
major = 0
minor = 1
branch = 3
fork = 0

version = [ major, minor, branch, fork ]

libver = env.GenVersion('version.h',
                        VERSION = version)

src = [ 'alloc.c', 'debug.c', 'version.c' ]

if platform == 'android':
    arm = env.NDK(name, src,
                  INCLUDES = [ '../include', '.' ])

    env.Install(prefix + '/lib', arm)
    targets = [ arm ]
else:
    linkflags = env.soname(name, major, minor, branch, fork)

    static = env.StaticLibrary(name, src,
                               LINKFLAGS = env['LDFLAGS'],
                               LIBS = [],
                               CCFLAGS = env['CFLAGS'],
                               CPPPATH = [ '../include', '.' ])
    shared = env.CMSharedLibrary(name, src,
                                 VERSION = version,
                                 LINKFLAGS = linkflags + ' ' + env['LDFLAGS'],
                                 LIBS = [],
                                 CCFLAGS = env['CFLAGS'],
                                 CPPPATH = [ '../include', '.' ])

    env.Install(prefix + '/lib', static)

    targets = [ static ]

    if env.build_shared():
        targets += [ shared ]
        env.InstallShared(prefix + '/lib', shared,
                          VERSION = version,
                          NAME = name)

env.Depends(src, libver)

if env.GetOption('clean'):
    env.Clean(targets, [ 'version.h' ])
    for i in [ 'libs', 'jni', 'obj' ]:
        try:
            shutil.rmtree(i)
        except:
            pass

Return('targets')
